
Cloudmesh ``cm`` Command
========================

iPython Execution of shell commands
-----------------------------------

In this section we use one of the build in features of iPython. IPython
provides various mechanisms to call programs within its shell. Onoe of
the ways to do so it tou use the ! character at the beginning of a line
to execute the command in the shell.

However, there are more convenient ways to eliminate the ! sign at the
beginning of a line. One way is to use the alias command, another is to
use the %rehasx command.

IPython Alias
~~~~~~~~~~~~~

With the alias command we simply define a new command with the name cm
that we can call directly from IPython. Here we make sure that the
parameters ar between "" so that they are properly set. Just execute the
following lines.

.. code:: python

    alias cm cm %s
Now let us test the command and lets print the version of cloudmesh cm

.. code:: python

    cm version

.. parsed-literal::

    1.0.4


Python %rehashx
~~~~~~~~~~~~~~~

In addition to the direct spesification IPython has also a rehashx
function, that loads the commands found in the $PATH variable so you can
aexecute the without !.

.. code:: python

    %rehashx
.. code:: python

    cm version

.. parsed-literal::

    1.0.4


We are using now one of the methods to call the cm commands in the
nextfollowing sections.

``cm`` Command
--------------

The ``cm`` command has a number of options that are useful to pass a
script or a command directly into cm. Please however not that in some
cases the command must be quoted to avoid confusion between flags used
for cm and flags used for its subcommands. Let us invoce the -h flag to
see whaich options cm has.

.. code:: python

    cm -h

.. parsed-literal::

    cm.
    
        Usage:
          cm [-q] help
          cm [-v] [-b] [--file=SCRIPT] [-i] [COMMAND ...]
    
        Arguments:
          COMMAND                  A command to be executed
    
        Options:
          --file=SCRIPT  -f  SCRIPT  Executes the scipt
          -i                 After start keep the shell interactive,
                             otherwise quit [default: False]
          -b                 surpress the printing of the banner [default: False]
        


Help
~~~~

Now let us execute the help command to see what other functions are
supported. As cm is based on cmd3 that you can find in pypi it inherots
a number of commands from cmd3. However, more importantly it also
obtains a number of commands from cm itself. To more easily distingushe
the categories of the cloud related commands we introduced two of them
called GUI commands and cloud commands.

.. code:: python

    cm help

.. parsed-literal::

    
    Documented commands (type help <topic>):
    ========================================
    EOF       edit      help       label   plugins  register        user   
    banner    exec      image      list    project  script          var    
    clear     exp       info       man     py       security_group  verbose
    cloud     flavor    init       metric  q        storm           version
    defaults  graphviz  inventory  open    quit     timer           vm     
    dot2      group     keys       pause   rain     use             web    
    
    Gui Commands
    ============
    web
    
    Cloud Commands
    ==============
    cloud     group  inventory  rain            storm  keys   
    defaults  image  list       register        user   project
    flavor    init   metric     security_group  vm   
    


Starting the Web broser
~~~~~~~~~~~~~~~~~~~~~~~

To start the browser, simply type the command

.. raw:: html

   <pre>cm web</pre>





Listing Clouds
~~~~~~~~~~~~~~

.. code:: python

    cm cloud list

.. parsed-literal::

    +---------+----------+
    | cloud   | active   |
    +=========+==========+
    | alamo   |          |
    +---------+----------+
    | aws     |          |
    +---------+----------+
    | azure   |          |
    +---------+----------+
    | hp      |          |
    +---------+----------+
    | hp_east |          |
    +---------+----------+
    | india   | True     |
    +---------+----------+
    | sierra  | True     |
    +---------+----------+


Let us inspect the parameters. To limit the output we just display the
first 10 lines of the help/man page. We see the --column option in the
list command.

.. code:: python

    cm help cloud | head -n 10 

.. parsed-literal::

    
        ::
    
            Usage:
                cloud [list] [--column=COLUMN]
                cloud info [CLOUD|--all]
                cloud alias NAME [CLOUD]
                cloud select [CLOUD]
                cloud on [CLOUD]
                cloud off [CLOUD]


...

For more information, read the help page. It essentially allows us to
display some more useful information beyond to just document the active
clouds. Let us also display the label. This is done with the following
command.

.. code:: python

    cm "cloud list --column=active,label"

.. parsed-literal::

    +---------+----------+------------+
    | cloud   | active   | label      |
    +=========+==========+============+
    | alamo   |          | alamo      |
    +---------+----------+------------+
    | aws     |          | aws        |
    +---------+----------+------------+
    | azure   |          | waz        |
    +---------+----------+------------+
    | hp      |          | hpos       |
    +---------+----------+------------+
    | hp_east |          | hpeos      |
    +---------+----------+------------+
    | india   | True     | ios_havana |
    +---------+----------+------------+
    | sierra  | True     | sos        |
    +---------+----------+------------+


Let us now demonstrate a common error by not using proper quoting. This
occurs when you use option flags with the command. Here our current
parser is unable to distinguish between the options passed to cm and the
options as used in the cm command. You see the usage message that we do
not have a --column in the cm command. To avoid thie use the " " as
previously shown.

.. code:: python

    cm cloud list --column=active,label

.. parsed-literal::

    Usage:
          cm [-q] help
          cm [-v] [-b] [--file=SCRIPT] [-i] [COMMAND ...]

