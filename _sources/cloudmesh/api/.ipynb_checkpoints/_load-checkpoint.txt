
Load Command
============

CLoudmesh comes with a number f easy to use configuration files. All of
them are yaml files. These configuration files configure certain
aspects. They are important when cloudmesh starts up or is run in user
more. In server mode the information is typically retrieved from the
cloudmesh database.

We focus here on some of the most important configuration files. After
deployment they can be found in the ``~/.cloudmesh`` directory

API for cloudmesh.yaml
----------------------

Information about the user and which clouds he has access to are stored
in the ``cloudmesh.yaml`` file.

.. code:: python

    import cloudmesh
.. code:: python

    user = cloudmesh.load()
.. code:: python

    user.cloudnames()



.. parsed-literal::

    ['alamo', 'hp_east', 'sierra', 'aws', 'hp', 'india', 'azure']



.. code:: python

    user.firstname



.. parsed-literal::

    'Gregor'



.. code:: python

    user.lastname



.. parsed-literal::

    'von Laszewski'



To obtain the futuregrid username use the command ``user.username()``

API for cloudmesh\_server.yaml
------------------------------

To configure the server and the databases the server yaml file is used.
via the load command it will be loaded into a dict. A special get
function can get sub dictionaries.

.. code:: python

    config = cloudmesh.load("server")
.. code:: python

    print config.keys()

.. parsed-literal::

    ['kind', 'cloudmesh', 'meta']


.. code:: python

    config.get('meta').keys()



.. parsed-literal::

    ['yaml_version', 'kind', 'prefix', 'location', 'filename']



.. code:: python

    config.get('meta.filename')



.. parsed-literal::

    '/Users/flat/.cloudmesh/cloudmesh_server.yaml'



.. code:: python

    print config.get('cloudmesh').keys()

.. parsed-literal::

    ['server']


API for cloudmesh\_launcher.yaml
--------------------------------

We are currently working on integrating PaaS launchers into cloudmesh
that easily deploy software based on configuration parameters specified
in the launchers. The specification of the launchers are stored under
``cloudmesh.launcher.recipies``. We provide the information for such a
launcher as an example.

.. code:: python

    config = cloudmesh.load("launcher")
.. code:: python

    print config.keys()

.. parsed-literal::

    ['kind', 'cloudmesh', 'meta']


.. code:: python

    config.get('cloudmesh').keys()



.. parsed-literal::

    ['launcher']



.. code:: python

    config.get('cloudmesh.launcher').keys()



.. parsed-literal::

    ['recipies']



.. code:: python

    config.get('cloudmesh.launcher.recipies').keys()



.. parsed-literal::

    ['mooc', 'nagios', 'slurm', 'ganglia', 'hadoop']



.. code:: python

    from pprint import pprint 
    pprint (config.get('cloudmesh.launcher.recipies.mooc'))

.. parsed-literal::

    {'description': 'Deploys a Slurm cluster. One of the Vms is the Master, while the others register with the master as worker nodes. The master will be the first node in the list.\n',
     'image': '/static/img/launcher/mooc.png',
     'label': 'slurm',
     'name': 'Mooc',
     'parameters': [{'nodes': {'type': 'integer', 'value': 1}},
                    {'other': {'type': 'float', 'value': 5.0}},
                    {'types': {'type': 'string',
                               'value': 'enter vm or bare metal'}},
                    {'selector': {'type': 'selector',
                                  'value': ['vm', 'baremetal', 'xyz']}},
                    {'cloud': {'type': 'selector', 'value': ['india', 'sierra']}}],
     'script': {'type': 'sh',
                'value': 'echo "hello" {{ selector }} -np {{ nodes }}'}}


